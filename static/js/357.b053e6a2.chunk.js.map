{"version":3,"file":"static/js/357.b053e6a2.chunk.js","mappings":"+SAEMA,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,gEACoCF,IAF5B,UAIP,OAHlBG,EADyB,QAIlBC,OAJkB,sBAKvB,IAAIC,MAAM,yCAA0CF,EAASC,QALtC,gCAOxBD,EAASG,MAPe,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,oBACoCR,EADpC,oBADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfG,EAAe,mCAAG,WAAMD,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,4BAC4CR,EAD5C,oBADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfI,EAAe,mCAAG,WAAMF,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,4BAC4CR,EAD5C,2BADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfK,EAAY,mCAAG,WAAMC,GAAN,uFACHV,EAAAA,EAAAA,IAAA,0DAC8BU,EAD9B,oBAC+CZ,IAF5C,UAIF,OAHlBG,EADoB,QAIbC,OAJa,sBAKlB,IAAIC,MAAM,yCAA0CF,EAASC,QAL3C,gCAOnBD,EAASG,MAPU,2CAAH,qD,0JCvCZO,EAAY,yCA+CzB,UA7CgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQZ,GAAYa,EAAAA,EAAAA,MAAZb,QAoBR,OAlBAc,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIJ,GAAW,GACXE,EAAS,MAHb,SAI+BG,EAAAA,GAAoBf,GAJnD,OAIUgB,EAJV,OAKIC,QAAQC,IAAIF,GAEZR,EAAWQ,EAAaG,SAP5B,kDASIP,EAASP,GATb,yBAWIK,GAAW,GAXf,8EADc,uBAAC,WAAD,wBAedR,EACD,GAAE,CAACF,KAGF,0BACGW,IAAS,0BAAKA,EAAL,OACTF,IAAW,SAAC,IAAD,IACXF,EAAQa,OAAS,EAChBb,EAAQc,KAAI,SAAAC,GACV,OACE,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GAKnB,KAED,iDAIP,C","sources":["API.js","components/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'e3a0c6c42d69ea58a91a9b6b24735154';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const SearchMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${KEY}`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../API';\nimport { Loader } from './Loader';\n\nexport const ERROR_MSG = 'Something went wrong, please try again';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieReviews() {\n      try {\n        setLoading(true);\n        setError(null);\n        const movieReviews = await API.getMovieReviews(movieId);\n        console.log(movieReviews);\n\n        setReviews(movieReviews.results);\n      } catch (error) {\n        setError(ERROR_MSG);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieReviews();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {error && <h1>{error} </h1>}\n      {loading && <Loader />}\n      {reviews.length > 0 ? (\n        reviews.map(review => {\n          return (\n            <li key={review.id}>\n              <h4>Author: {review.author}</h4>\n              <p>{review.content}</p>\n            </li>\n          );\n        })\n      ) : (\n        <p>There is no reviews</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Reviews;\n"],"names":["KEY","getTrendingMovies","axios","response","status","Error","data","getMovieDetails","movieId","getMovieCredits","getMovieReviews","SearchMovies","query","ERROR_MSG","useState","reviews","setReviews","loading","setLoading","error","setError","useParams","useEffect","API","movieReviews","console","log","results","length","map","review","author","content","id"],"sourceRoot":""}