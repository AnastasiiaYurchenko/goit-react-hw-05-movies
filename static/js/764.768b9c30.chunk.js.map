{"version":3,"file":"static/js/764.768b9c30.chunk.js","mappings":"+SAEMA,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,gEACoCF,IAF5B,UAIP,OAHlBG,EADyB,QAIlBC,OAJkB,sBAKvB,IAAIC,MAAM,yCAA0CF,EAASC,QALtC,gCAOxBD,EAASG,MAPe,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,oBACoCR,EADpC,oBADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfG,EAAe,mCAAG,WAAMD,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,4BAC4CR,EAD5C,oBADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfI,EAAe,mCAAG,WAAMF,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,4BAC4CR,EAD5C,2BADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfK,EAAY,mCAAG,WAAMC,GAAN,uFACHV,EAAAA,EAAAA,IAAA,0DAC8BU,EAD9B,oBAC+CZ,IAF5C,UAIF,OAHlBG,EADoB,QAIbC,OAJa,sBAKlB,IAAIC,MAAM,yCAA0CF,EAASC,QAL3C,gCAOnBD,EAASG,MAPU,2CAAH,qD,kKCtCZO,EAAY,yCA2EzB,UAzEe,WACb,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BL,EAAAA,EAAAA,UAAS,MAAnC,eAAOM,EAAP,KAAcC,EAAd,KACA,GAA8BP,EAAAA,EAAAA,WAAS,GAAvC,eAAOQ,EAAP,KAAgBC,EAAhB,KAEMX,EAAQM,EAAaM,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,oGAEIJ,GAAW,GACXF,EAAS,MAHb,SAIiCO,EAAAA,GAAiBhB,GAJlD,OAIUG,EAJV,OAMIC,EAAkBD,EAAec,SANrC,gDAQIR,EAASR,GARb,yBAUIU,GAAW,GAVf,6EAHc,sBACA,KAAVX,GAA0B,OAAVA,GADN,mCAgBdD,EACD,GAAE,CAACC,IAkBJ,OACE,4BACE,kBAAMkB,SAlBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfC,QAAQC,IAAIH,GACZd,EAAgB,CAAEP,MAAOqB,EAAKI,SAASzB,MAAM0B,QAC7CL,EAAKM,OACN,EAYG,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,SAXZ,SAAAX,GACxB,IAAMY,EAAmBZ,EAAEa,OAAON,MAElC,GAAyB,KAArBK,EACF,OAAOxB,EAAgB,CAAC,GAE1BA,EAAgB,CAAEP,MAAO+B,GAC1B,KAKK,mBAAQH,KAAK,SAAb,uBAEDpB,IAAS,0BAAKA,EAAL,OACTE,IAAW,SAAC,IAAD,KAEZ,wBACGP,GACCA,EAAe8B,KAAI,SAAAC,GACjB,OACE,yBACE,SAAC,KAAD,CAEEC,GAAE,UAAKD,EAAME,IACbC,MAAO,CAAEC,KAAMzB,GAHjB,SAKGqB,EAAMK,OAASL,EAAML,MAJjBK,EAAME,KAFNF,EAAME,GAUlB,QAIV,C","sources":["API.js","pages/Movies.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'e3a0c6c42d69ea58a91a9b6b24735154';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const SearchMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${KEY}`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n","import React, { useEffect, useState } from 'react';\n\nimport * as API from '../API';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader';\n\nexport const ERROR_MSG = 'Something went wrong, please try again';\n\nconst Movies = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (query === '' || query === null) return;\n\n    async function SearchMovies() {\n      try {\n        setLoading(true);\n        setError(null);\n        const searchedMovies = await API.SearchMovies(query);\n\n        setSearchedMovies(searchedMovies.results);\n      } catch (error) {\n        setError(ERROR_MSG);\n      } finally {\n        setLoading(false);\n      }\n    }\n    SearchMovies();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    console.log(form);\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  };\n\n  const updateQuerySrting = e => {\n    const searchQueryValue = e.target.value;\n\n    if (searchQueryValue === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: searchQueryValue });\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" onChange={updateQuerySrting}></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      {error && <h1>{error} </h1>}\n      {loading && <Loader />}\n\n      <ul>\n        {searchedMovies &&\n          searchedMovies.map(movie => {\n            return (\n              <li key={movie.id}>\n                <Link\n                  key={movie.id}\n                  to={`${movie.id}`}\n                  state={{ from: location }}\n                >\n                  {movie.title || movie.name}\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["KEY","getTrendingMovies","axios","response","status","Error","data","getMovieDetails","movieId","getMovieCredits","getMovieReviews","SearchMovies","query","ERROR_MSG","useState","searchedMovies","setSearchedMovies","useSearchParams","searchParams","setSearchParams","error","setError","loading","setLoading","get","location","useLocation","useEffect","API","results","onSubmit","e","preventDefault","form","currentTarget","console","log","elements","value","reset","type","name","onChange","searchQueryValue","target","map","movie","to","id","state","from","title"],"sourceRoot":""}