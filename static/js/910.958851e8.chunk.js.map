{"version":3,"file":"static/js/910.958851e8.chunk.js","mappings":"+SAEMA,EAAM,mCAECC,EAAiB,mCAAG,oGACRC,EAAAA,EAAAA,IAAA,gEACoCF,IAF5B,UAIP,OAHlBG,EADyB,QAIlBC,OAJkB,sBAKvB,IAAIC,MAAM,yCAA0CF,EAASC,QALtC,gCAOxBD,EAASG,MAPe,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,oBACoCR,EADpC,oBADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfG,EAAe,mCAAG,WAAMD,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,4BAC4CR,EAD5C,oBADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfI,EAAe,mCAAG,WAAMF,GAAN,uFACNN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,4BAC4CR,EAD5C,2BADM,UAIL,OAHlBG,EADuB,QAIhBC,OAJgB,sBAKrB,IAAIC,MAAM,yCAA0CF,EAASC,QALxC,gCAOtBD,EAASG,MAPa,2CAAH,sDAUfK,EAAY,mCAAG,WAAMC,GAAN,uFACHV,EAAAA,EAAAA,IAAA,0DAC8BU,EAD9B,oBAC+CZ,IAF5C,UAIF,OAHlBG,EADoB,QAIbC,OAJa,sBAKlB,IAAIC,MAAM,yCAA0CF,EAASC,QAL3C,gCAOnBD,EAASG,MAPU,2CAAH,qD,0JCvCZO,EAAY,yCAyDzB,UAvDa,WACX,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQZ,GAAYa,EAAAA,EAAAA,MAAZb,QAoBR,OAlBAc,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIJ,GAAW,GACXE,EAAS,MAHb,SAI+BG,EAAAA,GAAoBf,GAJnD,OAIUgB,EAJV,OAKIC,QAAQC,IAAIF,EAAaG,MAEzBX,EAAaQ,EAAaG,MAP9B,kDASIP,EAASP,GATb,yBAWIK,GAAW,GAXf,8EADc,uBAAC,WAAD,wBAedT,EACD,GAAE,CAACD,KAGF,0BACGW,IAAS,0BAAKA,EAAL,OACTF,IAAW,SAAC,IAAD,IAEXF,EAAUa,KAAI,SAAAD,GACb,OACE,0BACGA,EAAKE,cACJ,gBACEC,IAAG,yCAAoCH,EAAKE,cAC5CE,IAAKJ,EAAKK,QAGZ,gBACEF,IAAG,oDACHC,IAAKJ,EAAKK,KACVC,MAAM,WAIV,6BAAKN,EAAKK,SACV,uCAAeL,EAAKO,eAfbP,EAAKQ,QAkBjB,MAGN,C","sources":["API.js","components/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'e3a0c6c42d69ea58a91a9b6b24735154';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n\nexport const SearchMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${KEY}`\n  );\n  if (response.status === 404) {\n    throw new Error('Something went wrong, please try again', response.status);\n  }\n  return response.data;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../API';\nimport { Loader } from './Loader';\n\nexport const ERROR_MSG = 'Something went wrong, please try again';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovieCredits() {\n      try {\n        setLoading(true);\n        setError(null);\n        const movieCredits = await API.getMovieCredits(movieId);\n        console.log(movieCredits.cast);\n\n        setMovieCast(movieCredits.cast);\n      } catch (error) {\n        setError(ERROR_MSG);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getMovieCredits();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {error && <h1>{error} </h1>}\n      {loading && <Loader />}\n\n      {movieCast.map(cast => {\n        return (\n          <li key={cast.cast_id}>\n            {cast.profile_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w200${cast.profile_path}`}\n                alt={cast.name}\n              ></img>\n            ) : (\n              <img\n                src={`https://via.placeholder.com/200x300?text=No+Image`}\n                alt={cast.name}\n                width=\"200px\"\n              ></img>\n            )}\n\n            <p> {cast.name}</p>\n            <p>Character: {cast.character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["KEY","getTrendingMovies","axios","response","status","Error","data","getMovieDetails","movieId","getMovieCredits","getMovieReviews","SearchMovies","query","ERROR_MSG","useState","movieCast","setMovieCast","loading","setLoading","error","setError","useParams","useEffect","API","movieCredits","console","log","cast","map","profile_path","src","alt","name","width","character","cast_id"],"sourceRoot":""}